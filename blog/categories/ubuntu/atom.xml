<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ubuntu | Garrett Nay]]></title>
  <link href="http://garrettn.github.io/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="http://garrettn.github.io/"/>
  <updated>2016-02-02T07:54:53-07:00</updated>
  <id>http://garrettn.github.io/</id>
  <author>
    <name><![CDATA[Garrett Nay]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Manage Your Dotfiles Easily With Git and Homeshick]]></title>
    <link href="http://garrettn.github.io/blog/2013/12/10/manage-your-dotfiles-easily-with-homeshick/"/>
    <updated>2013-12-10T15:31:03-07:00</updated>
    <id>http://garrettn.github.io/blog/2013/12/10/manage-your-dotfiles-easily-with-homeshick</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since my last post, and one reason for that is that I spent
some time upgrading to Ubuntu 13.10 and configuring my new system. It may be a
bad idea, but for some reason I prefer doing a fresh install rather than directly
upgrading when a new version of Ubuntu is released. But as fun as it can be to
configure a shiny new system, I&rsquo;ve learned that I really need a more systematic
way to keep track of some of the more repetitive tasks. One very useful tool I
found for doing this is called <a href="https://github.com/andsens/homeshick">Homeshick</a>.</p>

<!-- more -->


<p>That&rsquo;s not a typo: Homeshick is a tool similar to the better-known <a href="https://github.com/technicalpickles/homesick">Homesick</a>,
but instead of being a Ruby gem, it&rsquo;s written in pure Bash&mdash;hence the &ldquo;sh.&rdquo; It
took me a while to decide which one to use, but since I need my dotfiles set up
before I can start using Ruby (since I use <a href="https://github.com/sstephenson/rbenv">rbenv</a>), it makes more sense for
me to use the version that takes nothing more than running a shell script.</p>

<p>Homeshick makes it very easy to track your important dotfiles and synchronize
them between computers.</p>

<h2>What Are Dotfiles, and Why Should You Track Them?</h2>

<p>Dotfiles are, simply put, files that begin with a dot. On UNIX-like operating
systems, like GNU/Linux and OS X, dotfiles are hidden by default. That means
your file manager and your command line shell won&rsquo;t show them unless you
specifically tell them to.</p>

<p>For example, in Ubuntu&rsquo;s file manager you can hit <kbd>ctrl+h</kbd>, and you&rsquo;ll
see files like these:</p>

<p><img class="center" src="/images/posts/homeshick/hidden-files-nautilus.png" width="765" height="446" title="Hidden files in Nautilus" ></p>

<p>On the command line, you can use the <kbd>-a</kbd> flag with the <kbd>ls</kbd>
command to show hidden files in the current working directory:</p>

<p>```
user@computer:~$ ls -a
.              .compiz    Dropbox          .ICEauthority  .pki           .steampid       .Xauthority
..             .config    .gconf           .icons         .profile       Templates       .xsession-errors
.adobe         .dbus      .gem             .local         Public         .thunderbird    .xsession-errors.old
.bash_aliases  Desktop    .gitconfig       .macromedia    .pulse-cookie  tmp
.bash_history  Dev        .gksu.lock       .mozilla       .pyenv         Ubuntu One
.bash_logout   .dmrc      .gnome2          Music          .rbenv         .unison
.bashrc        Documents  .gnome2_private  .npm           .ssh           .vagrant.d
Books          Downloads  .grabMyBooks     .nvm           .steam         Videos
.cache         .dropbox   .homesick        Pictures       .steampath     VirtualBox VMs</p>

<p>```</p>

<p>That&rsquo;s great, but what do these dotfiles <em>do</em>? Well, all sorts of things. I
showed <a href="/blog/2013/10/21/run-programs-from-your-home-directory-in-ubuntu/">in a previous post</a> how some files, like <code>.profile</code> and <code>.bashrc</code>, let
you set environment variables. But that&rsquo;s just the beginning. You can set Bash
aliases, define functions, customize the prompt, and more. And those are just
the files dealing with the shell. Some dotfiles deal with specific programs,
like Git or npm.</p>

<p>The bottom line is that if you&rsquo;re a developer, you&rsquo;re very likely to find
yourself customizing many of these files to make your work easier (or <em>possible</em>,
even). And if you happen to work on multiple machines (such as at home and at
work), or if you migrate to a new machine or OS like I did, you&rsquo;re going to find
it very tedious to keep editing these files over and over to make them the same.</p>

<p>There has to be a better way, right? You&rsquo;re in luck! There is a better way&mdash;it&rsquo;s
called Homeshick.</p>

<h2>Installing Homeshick</h2>

<p>Since Homeshick is just a Bash script (or a small collection of scripts), you
don&rsquo;t really need to install it like a regular application. You just need to put
it in a place where you can access it. All it takes is a simple Git clone:</p>

<p><code>
$ git clone git://github.com/andsens/homeshick.git $HOME/.homesick/repos/homeshick
</code></p>

<p>This command simply clones the Homeshick repository to a hidden directory inside
your home directory. An added benefit of using Git to clone it is that you can
keep it up to date easily with a <kbd>git pull</kbd>.</p>

<p>Notice how the top-level directory is called <code>.homesick</code>. The developer
<a href="https://github.com/andsens/homeshick/wiki/Tutorials#bootstrapping">says this is intentional</a> for compatibility with Homesick.</p>

<p>Now you have access to the Homeshick script. You can start using immediately by
sourcing it:</p>

<p><code>
$ source "$HOME/.homesick/repos/homeshick/homeshick.sh"
</code></p>

<p>This command will load a <code>homeshick()</code> function into your shell session. Of course,
you&rsquo;ll want to have access to this function every time you open a shell session
without having to source it manually, so you should add the line to your <code>.bashrc</code>:</p>

<p><code>
$ printf '\nsource "$HOME/.homesick/repos/homeshick/homeshick.sh"' &gt;&gt; $HOME/.bashrc
</code></p>

<p>Now you&rsquo;ll be able to call <code>homeshick</code> every time you open up the terminal.</p>

<h2>Tracking Your Dotfiles</h2>

<p>Homeshick and Homesick both revolve around what they call &ldquo;castles"—a reference
to the saying "A man&rsquo;s home is his castle.&rdquo; A castle is a Git repository where
you store dotfiles. It has a particular structure, but you don&rsquo;t need to worry
about that because you can have Homeshick create one for you.</p>

<p><code>
$ homeshick generate dotfiles
</code></p>

<p>Here, I created a new castle called dotfiles, but you can call them whatever you
want. You could even have separate castles for different purposes, like one for
Bash files, one for Git configurations, and so on. Go crazy!</p>

<p>For me, so far, having one central castle is enough. So once you have a castle
created, you can start telling Homeshick to track whatever dotfiles you want.
How? You guessed it—with <kbd>homeshick track</kbd>.</p>

<p><code>
$ homeshick track dotfiles .bashrc
</code></p>

<p>Here you&rsquo;re telling Homeshick to track your <code>.bashrc</code> (since you&rsquo;ve customized
it to include Homeshick and want to save the changes) in your <code>dotfiles</code> castle.
As a result, Homeshick moves the file into the castle&rsquo;s directory and then
creates a symbolic link in its original location pointing to it.</p>

<p>What&rsquo;s so great about that, you ask? As I said before, the castle is a Git
repository, so now that the actual file is inside it, you can take advantage of
Git to keep track of your changes to it—and easily back it up to a remote
location. For example if you <a href="https://github.com/search?q=dotfiles&amp;ref=cmdform">search for dotfiles on GitHub</a> you&rsquo;ll come up
with roughly seven bazillion results. Developers love their dotfiles repos! I,
myself, don&rsquo;t feel the need to publish my own dotfiles for the world to see, so
I host mine in a private repository on Bitbucket. Whatever you do is up to you.</p>

<p>To look inside your castle, you can use a shortcut provided by Homeshick:</p>

<p><code>
$ homeshick cd dotfiles
</code></p>

<p>Unless you&rsquo;ve altered the code somehow, this is the same as typing
<kbd>cd ~/.homesick/repos/dotfiles</kbd>. But the Homeshick version is nicer,
wouldn&rsquo;t you say?</p>

<p>And now that you&rsquo;re inside the directory, you can do all the normal Git stuff.
In this example, since you just started tracking <code>.bashrc</code> you&rsquo;ll see it here
as a new file staged for committing:</p>

<p>```
$ git status
On branch master</p>

<p>Initial commit</p>

<p>Changes to be committed:
  (use &ldquo;git rm &mdash;cached <file>&hellip;&rdquo; to unstage)</p>

<pre><code>new file:   home/.bashrc
</code></pre>

<p>```</p>

<p>Notice how the file is inside <code>home</code> directory. That&rsquo;s how Homeshick and Homesick
both structure their castles.</p>

<h2>Never Feel Homes(h)ick Again</h2>

<p>So that&rsquo;s the basics of getting started with Homeshick. Once you&rsquo;ve pushed your
castle to a remote repository, it&rsquo;s easy to incorporate those dotfiles into a
new system. Homeshick even provides a <kdb>clone</kdb> command for that purpose.</p>

<p>I&rsquo;ve barely scratched the surface of what you can do with Homeshick—see
<a href="https://github.com/andsens/homeshick/wiki">the official documentation</a> for more details. The point is that Homeshick
makes it easy to keep track of those precious dotfiles. And they really are
precious to a developer, as I&rsquo;m beginning to discover!</p>

<p>Don&rsquo;t forget, also, that since this tool uses Git, you can harness Git&rsquo;s
capabilities to make your dotfiles repo fit your needs. Specifically, remember
branching. My main computer runs Ubuntu, but a while back I was thinking about
trying out a different Linux distribution on another machine. At first I thought
I would have to create a separate castle for that distro, but then I
remembered—Git has branching! You can have a branch for Ubuntu, a branch for
Arch, a branch for OS X, or whatever, and thus take advantage of the similarities
between systems while preserving the differences, <em>and</em> keep it all in one
place. It&rsquo;s beautiful.</p>

<p>So there you go. Homeshick. Use it. Or maybe you have your own preferred system
for tracking your dotfiles (<a href="http://dotfiles.github.io/">and there are many</a>). What have you found works
for you? Let me know in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Programs From Your Home Directory in Ubuntu]]></title>
    <link href="http://garrettn.github.io/blog/2013/10/21/run-programs-from-your-home-directory-in-ubuntu/"/>
    <updated>2013-10-21T21:18:00-06:00</updated>
    <id>http://garrettn.github.io/blog/2013/10/21/run-programs-from-your-home-directory-in-ubuntu</id>
    <content type="html"><![CDATA[<p><ins><strong>Update 23 Nov 2013:</strong> Since I upgraded to Ubuntu 13.10, setting variables
in .pam_environment no longer works for me. No matter what I have in there, even
if the syntax is correct, I get blocked from logging in to my account. I haven&rsquo;t
yet figured out why this is happening or what the solution is, but until I do,
I&rsquo;m setting my PATH variable in .profile instead. I recommend you do the same.</ins></p>

<h2>TL;DR</h2>

<p>Setting up a directory to run local applications is very simple. You just need
to do two things:</p>

<ol>
<li><p>Create a directory for them. I like to use <code>.local/bin</code> in my home directory.</p></li>
<li><p>Edit the PATH in one of the files that sets environment variables. In Ubuntu,
I recommended setting it in <del>.pam_environment</del> <ins>.profile</ins>.</p></li>
</ol>


<h2>Introduction</h2>

<p>I really enjoy using Ubuntu, and GNU/Linux systems in general. In my opinion,
they&rsquo;re ideal for web development.</p>

<p>A situation I&rsquo;ve run across recently is when I want to run applications that
exist in my user directory, rather than in the system directories. <!--more-->
These might be programs I created or compiled myself, or they might have been
installed by a package manager other than the system package manager (in
Ubuntu&rsquo;s case, APT).</p>

<p>For example, several software environments I work with have their own dedicated
package managers. Node.js has npm, Ruby has gem, and TeX Live has tlmgr, to name
a few. And while it&rsquo;s true that many of the packages available through these
managers can be installed from Ubuntu&rsquo;s main repositories, I&rsquo;ve decided that it&rsquo;s
better to use the dedicated managers when they exist. That way I can be sure to
have the most up-to-date packages, and they&rsquo;re generally easier to work with.</p>

<p>I&rsquo;ve also decided that when I&rsquo;m using dedicated package managers, I want them to
install to my home directory rather than to the default system directories. This
may just be a personal preference, but I like not having to type <code>sudo</code> before
every install command. It also feels a bit safer: since I&rsquo;m only making changes
to my home directory, nothing that goes wrong can be <em>that</em> catastrophic, and
the changes are easier to undo.</p>

<p>In this post I&rsquo;m just going to focus on how I like to configure my system to run
applications out of my home directory, without going into specifics about
the different package managers. It all basically boils down to two steps:</p>

<ol>
<li><p>Create a place to keep local applications.</p></li>
<li><p>Tell the system to look in that place when searching for applications.</p></li>
</ol>


<h2>Create a Directory for Local Applications</h2>

<p>There really is no one right place to put an application directory. It basically
comes down to what works best for you. What matters is that you have write
permissions to the directory, meaning you don&rsquo;t have to use <code>sudo</code> to make any
changes to it or inside it. Normally, that means inside your home directory.</p>

<p>I&rsquo;ve seen several different approaches. Some people like to create a <code>bin</code> folder
right inside their home directory (&ldquo;bin&rdquo; stands for &ldquo;binaries&rdquo;). Others create
a <code>local/bin</code> structure, mirroring the <code>/usr/local/bin</code> system directory found
in the standard UNIX filesystem. Wikipedia says the following about the
purpose of the <code>/usr/local</code> directory:</p>

<p><blockquote><p>Resembles /usr in structure, but its subdirectories are used for additions not<br/>part of the operating system distribution, such as custom programs or files from<br/>a BSD Ports collection. Usually has subdirectories such as /usr/local/lib or<br/>/usr/local/bin.</p><footer><strong>Wikipedia <a href="http://en.wikipedia.org/wiki/Unix_directory_structure#Conventional_directory_layout">http://en.wikipedia.org/wiki/Unix_directory_structure#Conventional_directory_layout</a> Unix directory structure</strong></footer></blockquote></p>

<p>Based on this description, <code>local/bin</code> seems like a fitting place. This is my
choice, with one small difference: I use <code>.local</code> instead of <code>local</code>. The dot
in front of the name makes it a hidden directory, so it won&rsquo;t show up with an
<code>ls</code> command unless you use the <code>-a</code> flag, and it won&rsquo;t be visible in a file
manager unless you set it to show hidden files (usually with Ctrl+H). I like it
that way, because normally when I&rsquo;m working in my home directory, I&rsquo;m only
concerned about files per se and not about programs. It just makes things feel
less cluttered to me. Also, Ubuntu already happens to have a <code>.local</code> directory
in your home directory by default. Not very compelling reasons, I know, but
that&rsquo;s what I do.</p>

<p>So if you&rsquo;re still following along, create a <code>bin</code> directory wherever you like
and then change into it.</p>

<p><code>
$ mkdir ~/.local/bin &amp;&amp; cd $_
</code></p>

<p>Now let&rsquo;s create a simple shell script to see if it&rsquo;s working. Create a file
called &ldquo;tron&rdquo; using the editor of your choice. Nano is probably the simplest.</p>

<p><code>
$ nano tron
</code></p>

<p>And, of course, you can call the script whatever you want, but I like knowing
that a program is fighting for me.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (tron)</span> <a href='/downloads/code/tron'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;I fight for the users!&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Once you&rsquo;ve saved the file, set it to be executable.</p>

<p><code>
$ chmod +x tron
</code></p>

<p>Now try calling the program. If you call it without any path, you should see an
error.</p>

<p><code>
$ tron
tron: command not found
</code></p>

<p>This error occurs because the shell doesn&rsquo;t know where to find the command <code>tron</code>.
If you tell it the exact directory to find it in, it will work. Right now, since
we&rsquo;re in the same directory, it&rsquo;s as simple as typing <code>./tron</code>. But that could
become rather annoying rather quickly if you need to remember the directory and
type it in, no matter where you are, any time you need to use the program.</p>

<p>Fortunately, there is a better way. What we need to do is change an environment
variable called PATH.</p>

<h2>Change PATH to Recognize the Directory</h2>

<p>PATH is an environment variable that the system uses to find executables. It&rsquo;s
essentially a list of directories separated by colons. When you type in a
command, the shell will search through the directories listed in PATH, going
from left to right. As soon as it finds an executable that matches, it will run
it. If it doesn&rsquo;t find it, you&rsquo;ll see an error like the one above.</p>

<p>To see what your current PATH is, you can type <code>echo $PATH</code>. You should see
something like this, though probably not exactly like this:</p>

<p><code>
$ echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games
</code></p>

<p>Unless you&rsquo;ve already made changes to PATH, you should see only system directories
there. What we need to do is add our custom directory to the list.</p>

<p>To change PATH on the fly, we can use the <code>export</code> command:</p>

<p><code>
$ export PATH=~/.local/bin:$PATH
</code></p>

<p><strong>Important note:</strong> Whenever you modify PATH, it&rsquo;s important that you include a
reference to the existing PATH. Otherwise you&rsquo;ll overwrite the whole thing, and
you&rsquo;ll lose access to critical commands. References to existing environment
variables are prefixed by the dollar sign.</p>

<p>This command works easily enough, but as soon as you close the terminal or log
out, your changes will be forgotten. To make your changes persist between
sessions, you need to edit a file in your home directory.</p>

<p>Here&rsquo;s where it gets a little tricky. There are several hidden files in your
home directory that have the potential to change environment variables (see
also <a href="https://help.ubuntu.com/community/EnvironmentVariables#Session-wide_environment_variables">EnvironmentVariables</a> from the Ubuntu wiki):</p>

<ul>
<li><p><strong>.bashrc</strong>&mdash;This is possibly the simplest place to set them. It&rsquo;s basically a
script that gets run every time you start a bash session as a <strong>non-login shell</strong>
(e.g., when you open up a new terminal window). You can just add the <code>export</code>
command described above to the end of this file, and the next time you start a
bash session, it will work. But if you need to access your programs outside of
a bash shell, you&rsquo;re out of luck.</p></li>
<li><p><strong>.profile</strong>&mdash;This script is run every time you start a <strong>login shell</strong>. That
includes graphical environments, so when you log in to your normal desktop, this
script will run. The advantage here is that it runs only once when you log in,
rather than every time you open a terminal window (although if you&rsquo;re only
setting environment variables, the performance gains will be negligible). This
script is also sourced when you log in via SSH.</p></li>
<li><p><strong>.bash_profile</strong>&mdash;This one is similar to .profile, except it runs only in a
login bash shell (such as through SSH). Ubuntu doesn&rsquo;t have this file by default,
but other systems might.</p></li>
<li><p><strong>.pam_environment</strong>&mdash;Ubuntu is the only distro I&rsquo;m aware of that uses this
file. This one is unique in that it is only for setting environment variables
(you can&rsquo;t run arbitrary script commands in it). It also has a different syntax
from the others. This file is read when you log in&mdash;before .profile is read, as
far as I can tell.</p></li>
</ul>


<p>The Ubuntu wiki recommends setting environment variables in .pam_environment, <del>so
that&rsquo;s what I do as far as it is possible</del>. <ins>(<strong>Update 11 Nov 2013:</strong> After
upgrading to Ubuntu 13.10, I&rsquo;ve found that having anything in .pam_environment
prevents me from being able to log in, even if the syntax is correct. Until I find
a solution, I&rsquo;m now setting my path in .profile.)</ins> As I mentioned, the syntax
for this file is different. You can refer to the <code>pam_env.conf</code> man page for details
(either <a href="http://linux.die.net/man/5/pam_env.conf">online</a> or by entering <code>man pam_env.conf</code>), but here are the main
things you need to watch out for.</p>

<ul>
<li><p>Each line is a variable declaration, taking this form:</p>

<p><code>VARIABLE [DEFAULT=[value]] [OVERRIDE=[value]]</code></p>

<p>You can use either <code>DEFAULT</code> or <code>OVERRIDE</code>, or both. I just use <code>DEFAULT</code>.</p></li>
<li><p>When referencing other variables, use the form <code>${VARIABLE}</code>. Note the curly
braces&mdash;other files don&rsquo;t use them, but this one does.</p></li>
</ul>


<p>With those caveats out of the way, you&rsquo;re ready to create your .pam_environment
file (there most likely won&rsquo;t already be one). Change back to your home
directory and create the file.</p>

<p><code>
$ cd
$ nano .pam_environment
</code></p>

<p>And just add the following line to the file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.pam_environment (pam_environment)</span> <a href='/downloads/code/pam_environment'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PATH DEFAULT=<span class="cp">${</span><span class="n">HOME</span><span class="cp">}</span>/.local/bin:<span class="cp">${</span><span class="n">PATH</span><span class="cp">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>What we&rsquo;ve done here is set the default PATH to include the <code>.local/bin</code> folder
inside your home directory (the HOME variable points to your home directory),
and then the rest of the existing path. As I mentioned before, PATH is a
colon-separated list of directories. While you could technically list the items
in any order, keep in mind that the list is read from left to right, so something
in one directory will override another thing of the same name down the list.</p>

<p><strong>Important note:</strong> Be absolutely certain that you have the syntax for this
file correct. If you don&rsquo;t, you may not be able to log back in after you&rsquo;ve
logged out. The Something Groovy blog <a href="http://somethinggroovy.blogspot.com/2012/07/pamenvironment-syntax-in-ubuntu.html">has a horror story about this happening</a>.
So just be careful.</p>

<p>Once you&rsquo;ve ensured that the syntax is correct, save the file and then log out.
Any change to this file will take effect only after you&rsquo;ve logged out and back
in again.</p>

<p>After you&rsquo;ve logged back in, commands in that <code>.local/bin</code> folder should now be
accessible to you. Go ahead and test it out by seeing if Tron is still fighting
for you. Open up a terminal and type:</p>

<p><code>
$ tron
</code></p>

<p>If all went well, you should see the response:</p>

<p><code>
I fight for the users!
</code></p>

<p>Hooray for Tron! Now you have a convenient location to put your local
applications that you can access on the command line from anywhere in the
filesystem. Enjoy!</p>
]]></content>
  </entry>
  
</feed>
