<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Garrett Nay]]></title>
  <link href="http://garrettn.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://garrettn.github.io/"/>
  <updated>2016-02-02T07:48:14-07:00</updated>
  <id>http://garrettn.github.io/</id>
  <author>
    <name><![CDATA[Garrett Nay]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Manage Your Dotfiles Easily With Git and Homeshick]]></title>
    <link href="http://garrettn.github.io/blog/2013/12/10/manage-your-dotfiles-easily-with-homeshick/"/>
    <updated>2013-12-10T15:31:03-07:00</updated>
    <id>http://garrettn.github.io/blog/2013/12/10/manage-your-dotfiles-easily-with-homeshick</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since my last post, and one reason for that is that I spent
some time upgrading to Ubuntu 13.10 and configuring my new system. It may be a
bad idea, but for some reason I prefer doing a fresh install rather than directly
upgrading when a new version of Ubuntu is released. But as fun as it can be to
configure a shiny new system, I&rsquo;ve learned that I really need a more systematic
way to keep track of some of the more repetitive tasks. One very useful tool I
found for doing this is called <a href="https://github.com/andsens/homeshick">Homeshick</a>.</p>

<!-- more -->


<p>That&rsquo;s not a typo: Homeshick is a tool similar to the better-known <a href="https://github.com/technicalpickles/homesick">Homesick</a>,
but instead of being a Ruby gem, it&rsquo;s written in pure Bash&mdash;hence the &ldquo;sh.&rdquo; It
took me a while to decide which one to use, but since I need my dotfiles set up
before I can start using Ruby (since I use <a href="https://github.com/sstephenson/rbenv">rbenv</a>), it makes more sense for
me to use the version that takes nothing more than running a shell script.</p>

<p>Homeshick makes it very easy to track your important dotfiles and synchronize
them between computers.</p>

<h2>What Are Dotfiles, and Why Should You Track Them?</h2>

<p>Dotfiles are, simply put, files that begin with a dot. On UNIX-like operating
systems, like GNU/Linux and OS X, dotfiles are hidden by default. That means
your file manager and your command line shell won&rsquo;t show them unless you
specifically tell them to.</p>

<p>For example, in Ubuntu&rsquo;s file manager you can hit <kbd>ctrl+h</kbd>, and you&rsquo;ll
see files like these:</p>

<p><img class="center" src="/images/posts/homeshick/hidden-files-nautilus.png" width="765" height="446" title="Hidden files in Nautilus" ></p>

<p>On the command line, you can use the <kbd>-a</kbd> flag with the <kbd>ls</kbd>
command to show hidden files in the current working directory:</p>

<p>```
user@computer:~$ ls -a
.              .compiz    Dropbox          .ICEauthority  .pki           .steampid       .Xauthority
..             .config    .gconf           .icons         .profile       Templates       .xsession-errors
.adobe         .dbus      .gem             .local         Public         .thunderbird    .xsession-errors.old
.bash_aliases  Desktop    .gitconfig       .macromedia    .pulse-cookie  tmp
.bash_history  Dev        .gksu.lock       .mozilla       .pyenv         Ubuntu One
.bash_logout   .dmrc      .gnome2          Music          .rbenv         .unison
.bashrc        Documents  .gnome2_private  .npm           .ssh           .vagrant.d
Books          Downloads  .grabMyBooks     .nvm           .steam         Videos
.cache         .dropbox   .homesick        Pictures       .steampath     VirtualBox VMs</p>

<p>```</p>

<p>That&rsquo;s great, but what do these dotfiles <em>do</em>? Well, all sorts of things. I
showed <a href="/blog/2013/10/21/run-programs-from-your-home-directory-in-ubuntu/">in a previous post</a> how some files, like <code>.profile</code> and <code>.bashrc</code>, let
you set environment variables. But that&rsquo;s just the beginning. You can set Bash
aliases, define functions, customize the prompt, and more. And those are just
the files dealing with the shell. Some dotfiles deal with specific programs,
like Git or npm.</p>

<p>The bottom line is that if you&rsquo;re a developer, you&rsquo;re very likely to find
yourself customizing many of these files to make your work easier (or <em>possible</em>,
even). And if you happen to work on multiple machines (such as at home and at
work), or if you migrate to a new machine or OS like I did, you&rsquo;re going to find
it very tedious to keep editing these files over and over to make them the same.</p>

<p>There has to be a better way, right? You&rsquo;re in luck! There is a better way&mdash;it&rsquo;s
called Homeshick.</p>

<h2>Installing Homeshick</h2>

<p>Since Homeshick is just a Bash script (or a small collection of scripts), you
don&rsquo;t really need to install it like a regular application. You just need to put
it in a place where you can access it. All it takes is a simple Git clone:</p>

<p><code>
$ git clone git://github.com/andsens/homeshick.git $HOME/.homesick/repos/homeshick
</code></p>

<p>This command simply clones the Homeshick repository to a hidden directory inside
your home directory. An added benefit of using Git to clone it is that you can
keep it up to date easily with a <kbd>git pull</kbd>.</p>

<p>Notice how the top-level directory is called <code>.homesick</code>. The developer
<a href="https://github.com/andsens/homeshick/wiki/Tutorials#bootstrapping">says this is intentional</a> for compatibility with Homesick.</p>

<p>Now you have access to the Homeshick script. You can start using immediately by
sourcing it:</p>

<p><code>
$ source "$HOME/.homesick/repos/homeshick/homeshick.sh"
</code></p>

<p>This command will load a <code>homeshick()</code> function into your shell session. Of course,
you&rsquo;ll want to have access to this function every time you open a shell session
without having to source it manually, so you should add the line to your <code>.bashrc</code>:</p>

<p><code>
$ printf '\nsource "$HOME/.homesick/repos/homeshick/homeshick.sh"' &gt;&gt; $HOME/.bashrc
</code></p>

<p>Now you&rsquo;ll be able to call <code>homeshick</code> every time you open up the terminal.</p>

<h2>Tracking Your Dotfiles</h2>

<p>Homeshick and Homesick both revolve around what they call &ldquo;castles"—a reference
to the saying "A man&rsquo;s home is his castle.&rdquo; A castle is a Git repository where
you store dotfiles. It has a particular structure, but you don&rsquo;t need to worry
about that because you can have Homeshick create one for you.</p>

<p><code>
$ homeshick generate dotfiles
</code></p>

<p>Here, I created a new castle called dotfiles, but you can call them whatever you
want. You could even have separate castles for different purposes, like one for
Bash files, one for Git configurations, and so on. Go crazy!</p>

<p>For me, so far, having one central castle is enough. So once you have a castle
created, you can start telling Homeshick to track whatever dotfiles you want.
How? You guessed it—with <kbd>homeshick track</kbd>.</p>

<p><code>
$ homeshick track dotfiles .bashrc
</code></p>

<p>Here you&rsquo;re telling Homeshick to track your <code>.bashrc</code> (since you&rsquo;ve customized
it to include Homeshick and want to save the changes) in your <code>dotfiles</code> castle.
As a result, Homeshick moves the file into the castle&rsquo;s directory and then
creates a symbolic link in its original location pointing to it.</p>

<p>What&rsquo;s so great about that, you ask? As I said before, the castle is a Git
repository, so now that the actual file is inside it, you can take advantage of
Git to keep track of your changes to it—and easily back it up to a remote
location. For example if you <a href="https://github.com/search?q=dotfiles&amp;ref=cmdform">search for dotfiles on GitHub</a> you&rsquo;ll come up
with roughly seven bazillion results. Developers love their dotfiles repos! I,
myself, don&rsquo;t feel the need to publish my own dotfiles for the world to see, so
I host mine in a private repository on Bitbucket. Whatever you do is up to you.</p>

<p>To look inside your castle, you can use a shortcut provided by Homeshick:</p>

<p><code>
$ homeshick cd dotfiles
</code></p>

<p>Unless you&rsquo;ve altered the code somehow, this is the same as typing
<kbd>cd ~/.homesick/repos/dotfiles</kbd>. But the Homeshick version is nicer,
wouldn&rsquo;t you say?</p>

<p>And now that you&rsquo;re inside the directory, you can do all the normal Git stuff.
In this example, since you just started tracking <code>.bashrc</code> you&rsquo;ll see it here
as a new file staged for committing:</p>

<p>```
$ git status
On branch master</p>

<p>Initial commit</p>

<p>Changes to be committed:
  (use &ldquo;git rm &mdash;cached <file>&hellip;&rdquo; to unstage)</p>

<pre><code>new file:   home/.bashrc
</code></pre>

<p>```</p>

<p>Notice how the file is inside <code>home</code> directory. That&rsquo;s how Homeshick and Homesick
both structure their castles.</p>

<h2>Never Feel Homes(h)ick Again</h2>

<p>So that&rsquo;s the basics of getting started with Homeshick. Once you&rsquo;ve pushed your
castle to a remote repository, it&rsquo;s easy to incorporate those dotfiles into a
new system. Homeshick even provides a <kdb>clone</kdb> command for that purpose.</p>

<p>I&rsquo;ve barely scratched the surface of what you can do with Homeshick—see
<a href="https://github.com/andsens/homeshick/wiki">the official documentation</a> for more details. The point is that Homeshick
makes it easy to keep track of those precious dotfiles. And they really are
precious to a developer, as I&rsquo;m beginning to discover!</p>

<p>Don&rsquo;t forget, also, that since this tool uses Git, you can harness Git&rsquo;s
capabilities to make your dotfiles repo fit your needs. Specifically, remember
branching. My main computer runs Ubuntu, but a while back I was thinking about
trying out a different Linux distribution on another machine. At first I thought
I would have to create a separate castle for that distro, but then I
remembered—Git has branching! You can have a branch for Ubuntu, a branch for
Arch, a branch for OS X, or whatever, and thus take advantage of the similarities
between systems while preserving the differences, <em>and</em> keep it all in one
place. It&rsquo;s beautiful.</p>

<p>So there you go. Homeshick. Use it. Or maybe you have your own preferred system
for tracking your dotfiles (<a href="http://dotfiles.github.io/">and there are many</a>). What have you found works
for you? Let me know in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keep All Your Octopress Plugins in One Place]]></title>
    <link href="http://garrettn.github.io/blog/2013/10/07/keep-all-your-octopress-plugins-in-one-place/"/>
    <updated>2013-10-07T15:57:00-06:00</updated>
    <id>http://garrettn.github.io/blog/2013/10/07/keep-all-your-octopress-plugins-in-one-place</id>
    <content type="html"><![CDATA[<p>Since I&rsquo;m still getting this blog started and learning the ropes with Octopress,
in my first few posts I&rsquo;m probably goint to talk about it a lot. So far it&rsquo;s
been quite a journey.</p>

<p>I&rsquo;m starting to incorporate some third-party plugins <a href="https://github.com/imathis/octopress/wiki/3rd-party-plugins">of which there many</a>.
These plugins add some very useful functionality, and I highly recommend you
check them out.</p>

<p>One thing I&rsquo;ve noticed that for several plugins (if not all&mdash;I haven&rsquo;t checked),
in order to install them you have to download multiple files and copy them into
different places in your project.<!--more--> There&rsquo;s nothing wrong with that;
it&rsquo;s just the way it works. But what if you want to keep track of where those
plugin files came from? What if you want to keep them up to date easily without
downloading them individually from GitHub every time there&rsquo;s an update? I&rsquo;ve
found a way to address these issues painlessly (or at least less painfully)
using Git submodules.</p>

<h2>Installing Plugins as Git Submodules</h2>

<p><a href="http://git-scm.com/book/en/Git-Tools-Submodules">Submodules are a pretty funky feature of Git</a> that allow you to include
another repository as a sub-project of your main repository, keeping track of
their relationship to each other while still keeping them independent. Weird,
right?</p>

<p>Let me illustrate. Let&rsquo;s say I want to replace Octopress&rsquo;s default Google site
search with the awesome service from <a href="http://tapirgo.com">Tapir</a>. Wouldn&rsquo;t you know it,
<a href="https://github.com/blimey85/octopress-tapir">there&rsquo;s a plugin for that</a> (and a mighty fine one if I do say so myself!).
But instead of just downloading the files and copying them as instructed in the
readme, I&rsquo;m going to add this repository as a submodule of my blog repository.</p>

<p>Here is how I add it as a submodule:</p>

<p><code>
$ git submodule add https://github.com/blimey85/octopress-tapir .plugin-sources/tapir
</code></p>

<p>It&rsquo;s essentially the same syntax as <code>git clone</code>. I&rsquo;m cloning it into a directory
called <code>.plugin-sources/tapir</code>, which will be created if it doesn&rsquo;t already
exist. I&rsquo;m calling it <code>.plugin-sources</code> to differentiate it from the <code>plugins</code>
directory, which contains only Ruby scripts for various plugins. The dot is there
to keep it hidden and consistent with the <code>.themes</code> directory.</p>

<p>The output of that command looks pretty much the same as what you&rsquo;d see with
<code>git clone</code>. But when I enter <code>git status</code>, the result is different.</p>

<p>```
$ git status</p>

<h1>On branch source</h1>

<h1>Changes to be committed:</h1>

<h1>(use &ldquo;git reset HEAD <file>&hellip;&rdquo; to unstage)</h1>

<p>#</p>

<h1>new file:   .gitmodules</h1>

<h1>new file:   .plugin-sources/tapir</h1>

<p>#
<code>``
There's a new file called</code>.gitmodules<code>; this is where Git lists information
about each submodule that you've installed. Also notice that the
</code>.plugin-sources/tapir` directory is there, but it&rsquo;s listed as a file. As far
as my master repository is concerned, that directory is nothing but a single
file, and it doesn&rsquo;t care what goes on inside that repository.</p>

<p>Until there&rsquo;s new commit in it, that is. You see, the submodule is a special
type of file that points to a specific commit of the repository. If the
repository changes what commit it&rsquo;s on, either from your own work or from pulling
in updates, the outer repository of my project will notice and consider it a
modified file. More on that in a bit.</p>

<p>First, I will commit my changes and push them to <a href="/blog/2013/10/03/octopress-deploy-to-github/">my backup repository</a>.</p>

<p><code>
$ git commit -m "Add Tapir plugin"
$ git push backup source
</code></p>

<p>There! Now that plugin is saved in my repository, and I can copy the necessary
files out of it. And if I ever need to work on my blog on another machine, I
just do a recursive clone to include all the submodules with it.</p>

<p><code>
$ git clone --recursive ssh://git@bitbucket.org/garrettnay/garrettn.github.io.git
</code></p>

<h2>Updating the Plugins</h2>

<p>So let&rsquo;s say at some point in the future, I&rsquo;m strolling around GitHub and I find
out that the Tapir plugin has been updated. I want to incorporate those updates
into my blog, and since I&rsquo;ve installed the plugin as a submodule, it&rsquo;s easy to
do.</p>

<p>All I have to do is go into the plugin directory and use Git to pull in the
changes from GitHub.</p>

<p>```
$ cd .plugin-sources/tapir</p>

<p>$ git pull</p>

<h2>OR</h2>

<p>$ git fetch origin
$ git merge origin/master
```</p>

<p>Now I have the latest version, and I can copy the updated files into my project.</p>

<p>When I go back into the root directory of my blog, Git tells me that the
submodule has been changed. Specifically, there are new commits on that
repository.</p>

<p>```
$ git status</p>

<h1>On branch source</h1>

<h1>Changes not staged for commit:</h1>

<h1>(use &ldquo;git add <file>&hellip;&rdquo; to update what will be committed)</h1>

<h1>(use &ldquo;git checkout &mdash; <file>&hellip;&rdquo; to discard changes in working directory)</h1>

<p>#</p>

<h1>modified:   .plugin-sources/tapir (new commits)</h1>

<p>#
no changes added to commit (use &ldquo;git add&rdquo; and/or &ldquo;git commit -a&rdquo;)
```</p>

<p>This basically means that submodule is pointing to one commit, but the repository
itself is now pointing to a different (newer) one. To get the submodule lined
up with the repository, I just to a <code>submodule update</code> command.</p>

<p><code>
$ git submodule update
Submodule path '.plugin-sources/tapir': checked out 'e20ce325efa29ca9deb0ac952085b3cf27462275'
</code></p>

<p>The hash will be different, depending on the commit. But the submodule has now
been updated, and I am all set to use the new plugin!</p>

<p>So that&rsquo;s how I manage my plugins with Octopress. One issue I haven&rsquo;t addressed
is the fact that I still have to manually copy new or updated files into my
project directory. I might try using symbolic links instead, but I would need to
experiment with that first. This system isn&rsquo;t perfect, but at least it is one
step above manually downloading individual files from the project repository.</p>

<p>How do <em>you</em> like to manage your Octopress plugins?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress: Deploy to GitHub, Back Up to Bitbucket]]></title>
    <link href="http://garrettn.github.io/blog/2013/10/03/octopress-deploy-to-github/"/>
    <updated>2013-10-03T18:22:00-06:00</updated>
    <id>http://garrettn.github.io/blog/2013/10/03/octopress-deploy-to-github</id>
    <content type="html"><![CDATA[<p>It&rsquo;s probably pretty obvious that this blog is built with <a href="http://octopress.org">Octopress</a>.
Obvious at least until I use a new theme.</p>

<p>Octopress is built on top of the static site generator <a href="http://jekyllrb.com">Jekyll</a>, and together
they make a fantastic blogging platform for hacker types. You can write your
posts in your favorite editor in plain text, you can track your changes with
Git, and you can publish on any web server that can serve static HTMl, CSS, and
JavaScript&mdash;no database necessary!</p>

<p>One popular place to deploy an Octopress blog is on <a href="http://pages.github.com">GitHub Pages</a>, and
Octopress has built-in functionality to make it trivially easy to do.<!--more-->
The blog you&rsquo;re reading right now is a testament to how simple it is (as is the
fact that the &ldquo;Octo&rdquo; in Octopress refers to the GitHub mascot, Octocat, I
believe.)</p>

<h2>Setting Up Deployment to GitHub</h2>

<p>The first thing you need to do, obviously, is create an account on GitHub. When
you have an account set up, you then create a repository that takes the form
<code>username.github.io</code>.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> GitHub will automatically recognize this repo as your
personal site, and any static web content you push here will be published.</p>

<p>Next, if you haven&rsquo;t already done so, <a href="http://octopress.org/docs/setup/">clone the Octopress repository on your computer and install the dependencies</a>.</p>

<p>Once Bundler finishes installing all the gems, you&rsquo;ll have the <code>rake</code> command
available to you with lots of tasks already configured to help you customize,
preview, generate, and deploy your blog.</p>

<p>The Rake task I want to focus on here is the aptly named <code>setup_github_pages</code>.
Simply invoke that task to get started.</p>

<p><code>
$ rake setup_github_pages
</code></p>

<p>It will now ask you for the URL for your repository. You can use either the
Git or HTTPS protocol, both of which should be easy to find on your
repository page. For this example, I&rsquo;ll use the URL for my own GitHub pages
repo.</p>

<p>```
Enter the read/write url for your repository
(For example, &lsquo;git@github.com:your_username/your_username.github.io.git)</p>

<pre><code>       or 'https://github.com/your_username/your_username.github.io')
</code></pre>

<p>Repository url: git@github.com:garrettn/garrettn.github.io.git
```</p>

<p>And that&rsquo;s all you need to do! You should now see a bunch of output like this:</p>

<p>```
Added remote git@github.com:garrettn/garrettn.github.io.git as origin
Set origin as default remote
Master branch renamed to &lsquo;source&rsquo; for committing your blog source files
rm -rf <em>deploy
mkdir </em>deploy
cd <em>deploy
Initialized empty Git repository in &hellip;&hellip;./garrettn.github.io/</em>deploy/.git/
[master (root-commit) 2d8c9ba] Octopress init
 1 file changed, 1 insertion(+)
 create mode 100644 index.html
cd &ndash;</p>

<hr />

<h2>Now you can deploy to git@github.com:garrettn/garrettn.github.io.git with <code>rake deploy</code></h2>

<p>```</p>

<p>A couple important things have happened here:</p>

<ol>
<li><p>The task added your repo URL as a Git remote and named it &ldquo;origin.&rdquo; If you
had cloned Octopress from the official repo, that remote was renamed to
&ldquo;octopress,&rdquo; and it&rsquo;s still available so you can conveniently pull in changes
from upstream.</p></li>
<li><p>The master branch, which was up to this point called &ldquo;master,&rdquo; was renamed to
&ldquo;source.&rdquo;</p></li>
<li><p>A new <code>_deploy</code> directory was created, and inside that directory a new Git
repository was created with that same remote as &ldquo;origin.&rdquo; This folder will be
ignored by Git in the root of your project, but here is where the &ldquo;master&rdquo; branch
is that will actually be pushed to your repository on GitHub.</p></li>
</ol>


<p>Now, like the script says, you simply need to enter <code>rake deploy</code> to make the
magic happen. You can run this command right after you generate your site.</p>

<p><code>
$ rake generate
$ rake deploy
</code></p>

<p>When you invoke the <code>generate</code> command, your site will be generated into the
<code>public</code> directory. The <code>deploy</code> task will then go into the <code>_deploy</code> directory
and pull in any changes there may be on the server (there shouldn&rsquo;t be). Next, it
will copy the contents of the <code>public</code> directory into <code>_deploy</code> and commit the
changes to the master branch. Finally, it will push that branch up to your remote
repository on GitHub.</p>

<p>Within about 10 minutes, you should see shiny new blog at <code>username.github.io</code>.
That was easy, wasn&rsquo;t it?</p>

<h2>What About the Source Files?</h2>

<p>As I said before, the Rake task for setting up deployment changes your main
branch from &ldquo;master&rdquo; to &ldquo;source.&rdquo; Since the deployment task only pushes the
master branch, it&rsquo;s completely up to you what to do with the source. You&rsquo;ll want
to back it up somewhere, and probably the easiest thing to do is to push that
branch up to GitHub also.</p>

<p><code>
$ git push -u origin source
</code></p>

<p>But suppose you don&rsquo;t want your source files to be publicly accessible? It might
be a silly thing to worry about, since everything in your source files gets
published to the site anyway. But what if you are working on a post that isn&rsquo;t
quite ready for prime time? Jekyll lets you set an option in the YAML front
matter of a post called <code>published</code>. When it is set to <code>false</code>, you&rsquo;ll still
see the post when you&rsquo;re previewing your site locally, but it won&rsquo;t get
generated for deployment.</p>

<p>So if you&rsquo;re working on a post that&rsquo;s going through several revisions, you might
not want to make it publicly accessible yet, but you&rsquo;ll probably still want to
back it up somewhere. What to do?</p>

<p>One of the simplest solutions is Bitbucket.</p>

<h2>Backing Up to Bitbucket</h2>

<p><a href="https://bitbucket.org">Bitbucket</a> is another code hosting service, perhaps not as popular as GitHub,
but still awesome and here&rsquo;s why: <strong>unlimited free private repositories</strong>.
Whereas GitHub charges you for any amount of private repos, Bitbucket bases its
payment scheme on how many users you have collaborating on your repos (it&rsquo;s
free for up to five users). So if you have a private project that you want to
back up to a safe place but not where it can be accessed by anybody, Bitbucket
is an excellent resource.</p>

<p>So here&rsquo;s what you do: Create a Bitbucket account if you don&rsquo;t have one, and
then set up a new repository for your Octopress source files (I gave it the same
name as on GitHub). On the page for your new repository, you&rsquo;ll find a URL that
you can add to your local Git repository. Then you simply add that remote. I
called mine &ldquo;backup.&rdquo;</p>

<p><code>
$ git remote add backup ssh://git@bitbucket.org/garrettnay/garrettn.github.io.git
</code></p>

<p>Now, whenever you have commits you want to back up, simply push the source
branch up to Bitbucket.</p>

<p><code>
$ git push -u backup source
</code></p>

<p>(Use the <code>-u</code> option the first time to set up a tracking branch. After that it&rsquo;s
no longer necessary.)</p>

<p>And that&rsquo;s all there is to it! Now you have an easy way to deploy your blog,
and also a place to back it up away from prying eyes. It&rsquo;s a setup that&rsquo;s worked
really well for me.</p>

<p>See, I told you Octopress was fun.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I&rsquo;m not going to go into details here about how to create repositories on GitHub or Bitbucket. The process on both sites is pretty straightforward, and they both have excellent documentation.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
