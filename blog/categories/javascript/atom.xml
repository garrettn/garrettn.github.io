<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Garrett Nay]]></title>
  <link href="http://garrettn.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://garrettn.github.io/"/>
  <updated>2016-02-02T07:48:14-07:00</updated>
  <id>http://garrettn.github.io/</id>
  <author>
    <name><![CDATA[Garrett Nay]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Still Not Sure About AngularJS]]></title>
    <link href="http://garrettn.github.io/blog/2014/08/19/still-not-sure-about-angularjs/"/>
    <updated>2014-08-19T08:22:47-06:00</updated>
    <id>http://garrettn.github.io/blog/2014/08/19/still-not-sure-about-angularjs</id>
    <content type="html"><![CDATA[<p>I had originally planned to title this post &ldquo;I&rsquo;m Starting to Get Sold on AngularJS,&rdquo; but a blog post I read the other day got me thinking again. In <a href="http://blog.andyet.com/2014/08/13/opinionated-rundown-of-js-frameworks">&ldquo;Opinionated Rundown of JS Frameworks&rdquo;</a>, <a href="https://twitter.com/HenrikJoreteg">Henrik Joreteg</a> from <a href="http://andyet.com">&amp;yet</a> gives some interesting critiques of Angular (as well as other JavaScript frameworks) that caused some of my old doubts to resurface. I still think Angular is a very cool framework, and I intend to continue experimenting with it, but I&rsquo;m hesitant to treat it like the only serious player in the game, as so many developers seem to do already.</p>

<!-- more -->


<p>In his post, Henrik gives his opinion on the pros and cons of AngularJS, and you can tell he feels pretty strongly about it because the cons are much longer and more detailed. I&rsquo;d like to offer my comments on some of those cons, including my original doubts and how those doubts have evolved.</p>

<h2>1. Learning Angular vs. Learning JavaScript</h2>

<p>Henrik&rsquo;s first concern with Angular is that developers run the risk of gaining skills that are very Angular-specific and not easily translatable to other contexts:</p>

<blockquote><p>Picking Angular means you’re learning Angular the framework instead of how to solve problems in JavaScript. &hellip; I’ve got developers who’s [sic] primary skill is Angular, not necessarily JavaScript.</p></blockquote>

<p>My first reaction to this point was to ask, How is that any different with any other framework? I believe that any time you use a framework to build an application, you&rsquo;re going to have to learn and use some skills that apply to that framwork only. You can&rsquo;t abstract away forever.</p>

<p>But the truth is that Angular is a pretty different beast next to all the other JavaScript frameworks out there. It uses a module system all its own. It chucks a lot of Web standards in favor of creating its own HTML &ldquo;directives&rdquo; to define DOM behavior. It uses dependency injection for <em>everything</em>.</p>

<p>None of these things is necessarily bad (especially the dependency injection). But I can see the risk of becoming so ingrained with &ldquo;the Angular way&rdquo; that you don&rsquo;t know how to do things outside of an Angular app.</p>

<p>I myself resisted learning Angular for a long time. I got wowed by demonstrations at conferences like a lot of people, but I didn&rsquo;t want to put serious effort into learning how to develop with the framework, I think because 1) it&rsquo;s trendy, and I have a natural resistance to trendy things; 2) it&rsquo;s backed by Google, which I have a bit of a &hellip; distaste for (more on that in a future post, possibly); and 3) I didn&rsquo;t want to change, Backbone being my first love in the world of JS frameworks.</p>

<p>Obviously, none of these reasons are good excuses for not expanding my skills and trying my things. I also realized that a lot of companies use AngularJS for their apps, so if I want to stay relevant, I at least have to learn how to use it. So lately I&rsquo;ve been learning what I can.</p>

<p>Turns out, I think Angular is pretty dang cool. It&rsquo;s amazing what you can create with very little setup and configuration. I&rsquo;m also really interested in the <a href="http://ionicframework.com">Ionic Framework for mobile apps</a>, which integrates tightly with Angular.</p>

<p>Ironically, as I started learning Angular, I felt the opposite of what Henrik is expressing here. I believed that working with Angular instead of Backbone would make me a better overall JavaScript developer, mainly because Angular itself doesn&rsquo;t provide any sort of model abstraction. Instead, you usually work with plain old JavaScript objects (POJOs), which requires you to really understand how JavaScript&rsquo;s prototype paradigm really works. But now I&rsquo;m starting to see what he means&mdash;when you consider the framework as a whole, you can really get used to a certain way of developing that relies mainly on Angular skills, as opposed to JavaScript skills.</p>

<p>So is learning Angular worth it? Most definitely. But I want to be careful not to let that be the only way I know how to develop wep applications.</p>

<h2>2. Separation of Concerns</h2>

<p>I have gone back and forth on this issue a lot. Henrik says that Angular violates the principle of <a href="http://en.wikipedia.org/wiki/Separation_of_concerns">separation of concerns</a> because of its HTML directives:</p>

<blockquote><p>In Angular you spend a lot of time describing behavior in HTML instead of JS. For me personally, this is the deal breaker with Angular. I don’t want to describe application logic in HTML, it’s simply not expressive enough because it’s a markup language for structuring documents, not describing application logic.</p></blockquote>

<p>I totally felt the same way at first. When I saw those <code>ng-click</code> directives, I thought, How are those any different from the <code>onclick</code> HTML attributes that are so looked down upon nowadays?</p>

<p>There&rsquo;s at least one big difference, actually, and that is that the expressions inside Angular directives are always contained within the scope of their controller, whereas the <code>onclick</code> attribute operates within the global scope. The whole concept of scope in Angular is pretty cool.</p>

<p>```html</p>

<!-- This click handler calls the global addItem function -->


<p><button onclick="addItem(item)">Add</button></p>

<!-- This one calls the addItem function that exists on the $scope object of the controller -->


<p><button ng-click="addItem(item)">Add</button>
```</p>

<p>But there&rsquo;s still the issue of application logic inside the HTML. That does go against what you&rsquo;re traditionally taught about web development. It&rsquo;s funny, though, because Angular developers consider this a major selling point of the framework. And a short while ago I realized, Why not? Why not let the HTML worry about the HTML, so the JavaScript can worry about the data and business logic? On the other hand, it seems bad to let <em>some</em> of the application logic go into the HTML while most of it stays in the JavaScript.</p>

<p>The jury is still out for me on this one. I think both sides make valid points, and I guess what really matters is which approach helps you accomplish the task more effectively.</p>

<h2>3. Magic</h2>

<p>No doubt about it, AngularJS has a lot of <a href="http://en.wikipedia.org/wiki/Magic_%28programming%29">magic</a>. That&rsquo;s what makes it so great for demos. Now some people in the programming community will tell you that magic in a framework is a great thing, while others will say it&rsquo;s a terrible thing. Henrik seems to lean toward the latter camp:</p>

<blockquote><p>Magic comes at a cost. When you’re working with something that’s highly abstracted, it becomes a lot more difficult to figure out what’s wrong when something goes awry. &hellip; I would guess most Angular users lack enough understanding of the framework itself to really feel confident modifying or debugging Angular itself.</p></blockquote>

<p>That describes me pretty well. I am still fairly new to Angular, though, and I have to say that the magic of Angular is pretty impressive. The two-way data binding is, of course, awesome. But one of the coolest features for me is how the dependency injection works. The injector knows what to give you just by what you call the parameter to your function! I have never seen that anywhere else in the JavaScript world.</p>

<p>```javascript
angular.module(&lsquo;MyApp&rsquo;)</p>

<pre><code>.controller('MainCtrl', function ($scope, $http) {
    // It knows what $scope and $http are just because you named them that!
});
</code></pre>

<p>```</p>

<p>But as Henrik says, magic comes at a cost. When there is so much happening for you automatically, you have to wonder how much functionality you&rsquo;re including that you don&rsquo;t actually need, which could be a drain on performance. Angular is increasingly separating out its functionality into modules, though, so that may become less of an issue.</p>

<p>Even more to the point, the more magic your framwork provides, the easier it is to remain unaware of what goes on under the hood, making it harder to tailor to your specific needs and harder to optimize. This point goes along with the first one, in that all this magic increases your reliance on the specific framework you use.</p>

<p>That isn&rsquo;t to say that you should avoid any magic or abstraction that frameworks provide (in fact, Henrik makes this point later on in his post). Frameworks exist to make it easier for us to develop better applications more efficiently. They also make it a lot more fun (and Angular is definitely fun to work with). But too much abstraction can be a danger because, in Henrik&rsquo;s words, &ldquo;when you veer off the beaten path, you’re on your own.&rdquo;</p>

<h2>Conclusion: Have I Gotten Anywhere?</h2>

<p>I think I&rsquo;ve proven the premise of the title of this post&mdash;I&rsquo;m just not sure how I feel about AngularJS. It has been fun to learn and explore, certainly. And I think it&rsquo;s important to understand how to develop applications with it on some level at least. Angular obviously isn&rsquo;t going away any time soon. More and more development teams are turning to it, and if I want to be a part of some of the cool work that is going on, I&rsquo;m going to have to speak the language.</p>

<p>Still, I&rsquo;m afraid to go all in and become an Angular developer through and through. Instead I&rsquo;ll focus on becoming a great, well-rounded JavaScript developer who knows how to select and use the best tools for the job at hand.</p>

<p>Perhaps not surprisingly, at the end of the post I&rsquo;ve been referring to, Henrik discusses a new framework created by the people at &amp;yet called <a href="http://ampersandjs.com">Ampersand</a>. Of course they&rsquo;re going to favor their own creation, but I&rsquo;ve been looking at Ampersand the past couple days, and I have to say, it is pretty cool. It&rsquo;s like the new generation of Backbone. I will certainly have more to say about it in a future post.</p>

<p>Until then, keep on learning and keep on coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Write Modular JavaScript That Works Anywhere With UMD]]></title>
    <link href="http://garrettn.github.io/blog/2014/02/19/write-modular-javascript-that-works-anywhere-with-umd/"/>
    <updated>2014-02-19T06:20:47-07:00</updated>
    <id>http://garrettn.github.io/blog/2014/02/19/write-modular-javascript-that-works-anywhere-with-umd</id>
    <content type="html"><![CDATA[<p>Have you ever used a JavaScript library that gives you more than one way to include it in your project? Take, for example, the <a href="https://github.com/jeromegn/Backbone.localStorage">Backbone localStorage adapter</a>. The readme gives you two ways to put it into your project: including it through a separate script tag in your HTML, or loading it through <a href="http://requirejs.org/">RequireJS</a>.</p>

<p>As a developer that is still learning to navigate the JavaScript landscape, I&rsquo;ve wondered how libraries like that do it. The two methods of inclusion work entirely differently. When you include a library using a script tag, you&rsquo;re usually creating global variables that other scripts can use. But one of the main benefits of using RequireJS is that it eliminates the need for global variables. How can the same resource be loaded in both ways?</p>

<p>After some digging, I learned that many of these projects use a pattern called the <a href="https://github.com/umdjs/umd">Universal Module Definition</a>.</p>

<!-- more -->


<h2>Modularity in Javascript</h2>

<p>FIrst, a word about modularity in Javascript. I&rsquo;m a little late to this party, but the current wisdom in JavaScript development seems to be that your application code should be modular. I take &ldquo;modular&rdquo; to mean a few things:</p>

<ul>
<li>Your application is split up into distinct, self-contained pieces (modules), each responsible for a specific bit of functionality.</li>
<li>A module doesn&rsquo;t add any unnecessary variables or functions to the global namespace. It is <em>encapsulated</em>—it exposes an interface for other modules to use, but that&rsquo;s it.</li>
<li>Modules are potentially reusable in other contexts.</li>
<li>Modules do not depend rigidly on each other. In other words, they&rsquo;re loosely coupled, and dependencies could probably be swapped without too much trouble.</li>
</ul>


<p>Probably not the best definition in the world (Addy Osmani <a href="http://addyosmani.com/writing-modular-js/">explains it much better than I can</a>), but it captures the basic idea as far as I understand it.</p>

<p>The problem with JavaScript is that for a long time, there wasn&rsquo;t a really good way to make code modular. When you&rsquo;re just putting in a bunch of script tags, the only way the scripts can use each other is if they create global variables, and global variables get messy pretty quickly. It&rsquo;s also hard to make sure dependencies are resolved correctly—all you can do is keep track of the order the scripts are loaded in, which gets tedious after a while. Limitations like these are the reason why modular JavaScript is a relatively new concept, while other programming languages have had it standard from the beginning.</p>

<p>As it turns out, built-in module functionality <a href="http://wiki.ecmascript.org/doku.php?id=harmony:modules">is coming in the ECMAScript 6 specification</a>, but that still appears to be a ways off. In the meantime, other, less-official specifications have emerged to fill in the gap. The big players are <a href="http://www.commonjs.org/">CommonJS</a> and <a href="https://github.com/amdjs/amdjs-api/wiki/AMD">Asynchronous Module Definition (AMD)</a>. CommonJS is the system used in <a href="http://nodejs.org/">Node.js</a>, and the most popular implementation of AMD is <a href="http://requirejs.org/">RequireJS</a>, which I like to use on the front end.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>These specifications work quite differently. But suppose you&rsquo;re writing a library in JavaScript. This library could be useful both in the browser, where AMD is frequently used, or on the server, where CommonJS is commonly used (heh). On top of that, you also want to make this library accessible to developers who want to use it the old-fashioned way, via script tags. How do you do it?</p>

<p>There are many ways you could go about solving this problem. But one solution I particularly like is UMD—the Universal Module Definition.</p>

<h2>The Universal Module Definition</h2>

<p>UMD is actually nothing more than a collection of patterns you can find in <a href="https://github.com/umdjs/umd">a repository on GitHub</a>. There are lots of different patterns, or definitions, each for a different set of requirements. But they&rsquo;re all essentially variations on the same idea.</p>

<p>For example, let&rsquo;s look at <a href="https://github.com/umdjs/umd/blob/master/returnExports.js">returnExports.js</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (returnExports.js)</span> <a href='/downloads/code/umd/returnExports.js'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">root</span><span class="p">,</span> <span class="nx">factory</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">define</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// AMD. Register as an anonymous module.</span>
</span><span class='line'>        <span class="nx">define</span><span class="p">([</span><span class="s1">&#39;b&#39;</span><span class="p">],</span> <span class="nx">factory</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">exports</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Node. Does not work with strict CommonJS, but</span>
</span><span class='line'>        <span class="c1">// only CommonJS-like environments that support module.exports,</span>
</span><span class='line'>        <span class="c1">// like Node.</span>
</span><span class='line'>        <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">factory</span><span class="p">(</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Browser globals (root is window)</span>
</span><span class='line'>        <span class="nx">root</span><span class="p">.</span><span class="nx">returnExports</span> <span class="o">=</span> <span class="nx">factory</span><span class="p">(</span><span class="nx">root</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}(</span><span class="k">this</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//use b in some fashion.</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Just return a value to define the module export.</span>
</span><span class='line'>    <span class="c1">// This example returns an object, but the module</span>
</span><span class='line'>    <span class="c1">// can return a function as the exported value.</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{};</span>
</span><span class='line'><span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This definition makes your module available as a CommonJS module, an AMD module, or a global variable, depending on the environment. How? The magic lies in one of those peculiar features of JavaScript, the <a href="https://en.wikipedia.org/wiki/Immediately-invoked_function_expression">immediately-invoked function expression (IIFE)</a>.</p>

<p>I won&rsquo;t go into a lot of detail about how IIFEs work (see <a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/">Ben Alman&rsquo;s article</a> for an excellent explanation). In a nutshell, an IIFE consists of the following things:</p>

<ol>
<li>a function definition</li>
<li>parentheses wrapped around the function to turn it into a function <em>expression</em>, which can be executed immediately, whereas a function <em>declaration</em> cannot</li>
<li>a pair of parentheses at the end, optionally containing arguments to be passed into the function; these parentheses signal that the function is to be executed right away</li>
</ol>


<p>IIFEs are a useful tool for encapsulating code, because variables declared inside the function are not accessible outside it. In the case of UMD, the IIFE gives you control over exactly how the module is exposed.</p>

<p>Let&rsquo;s go back to the <code>returnExports</code> example. Here it is again with the internals stripped out:</p>

<p>```javascript
(function (root, factory) {</p>

<pre><code>// environment detection here
</code></pre>

<p>}(this, function (b) {</p>

<pre><code>// module definition here
</code></pre>

<p>}));
```</p>

<p>The function has two parameters, <code>root</code>, and <code>factory</code>. If you look at the arguments at the bottom, you can see that the argument passed in for <code>root</code> is <code>this</code>, which represents the global object (the <code>window</code> object in a browser context). Although the global object is accessible inside the function (since it&rsquo;s global), using a local variable to reference it is often a good idea because it shortens the lookup chain and can possibly improve performance.</p>

<p>The <code>factory</code> parameter gets the value of a function that is passed in as the second argument. This factory function is where the module is actually defined. It&rsquo;s the equivalent of the <code>define</code> function in RequireJS, or the function you assign to <code>module.exports</code> in Node. As in those individual situations, this function can return anything, but usually it&rsquo;s going to be an object or a function.</p>

<p>Now let&rsquo;s look at what happens inside the main function:</p>

<p>```javascript
if (typeof define === &lsquo;function&rsquo; &amp;&amp; define.amd) {</p>

<pre><code>// AMD. Register as an anonymous module.
define(['b'], factory);
</code></pre>

<p>} else if (typeof exports === &lsquo;object&rsquo;) {</p>

<pre><code>// Node. Does not work with strict CommonJS, but
// only CommonJS-like environments that support module.exports,
// like Node.
module.exports = factory(require('b'));
</code></pre>

<p>} else {</p>

<pre><code>// Browser globals (root is window)
root.returnExports = factory(root.b);
</code></pre>

<p>```</p>

<p>I call this part the environment detection. Here we have a series of if-then statements to determine what kind of module loader is present, if there is any. First we test if it&rsquo;s an AMD loader by looking for a <code>define</code> function; that function should also have a property called <code>amd</code>. If it&rsquo;s there, we use the <code>factory</code> function as the callback for <code>define</code>, thus defining an AMD module.</p>

<p>If an AMD loader isn&rsquo;t there there, we then look for the CommonJS <code>exports</code> object. As the comments in the code mention, this part doesn&rsquo;t follow the strict CommonJS specification, but there is <a href="https://github.com/umdjs/umd/blob/master/commonjsStrict.js">another definition for that</a>. As with AMD, if we are using a CommonJS-like loader, then the function assigns the <code>factory</code> function to <code>module.exports</code>, making it ready to be loaded as a Node module.</p>

<p>If neither of those loaders are present, then the last option is to load the module as a global variable. This is where the <code>root</code> parameter comes in: the script assigns the <code>factory</code> function as a property of <code>root</code>, which in most cases is going to point to <code>window</code>. Here they have called the global variable <code>returnExports</code>, but that&rsquo;s just because that&rsquo;s the name of the module pattern we&rsquo;re using—you can call it anything. If the script gets to this point, the module will be available as a global, and so the script can be included through an HTML script tag, and other scripts will be able to use it.</p>

<p>You might have noticed an argument called <code>b</code> that&rsquo;s getting passed to the <code>factory</code> function. That&rsquo;s basically just a demonstration of how dependencies are handled in UMD. If your module depends on other modules, you can put them in the way <code>b</code> is done here. If not, you can take that part out. In fact, <a href="https://github.com/umdjs/umd/blob/master/returnExports.js">the actual returnExports definition</a> includes a variant that uses no dependencies, so you can follow that one if it applies.</p>

<h2>Using UMD</h2>

<p>And there you have it! Now you have a way to write a JavaScript module that can be loaded by both of the major module-loading systems, or as a global when neither of those loaders are present. What I especially love about UMD is that the global is created <em>only</em> when the loaders aren&rsquo;t present, so if you&rsquo;re using RequireJS, you&rsquo;re not going to see this module as a global.</p>

<p>The definition we looked at here is only one of many included in the UMD repository. Be sure to check it out the other versions to see if there is a different ones that better fits the particular requirements of the module you&rsquo;re writing.</p>

<p>The downside of the UMD approach is that it does add a bit of boilerplate to your code. I personally don&rsquo;t think it&rsquo;s that much, but I suppose it could get old after a while. To make things a little easier, I created <a href="https://sublime.wbond.net/packages/UMD%20snippets">a package of Sublime Text snippets</a> for all the UMD patterns. If you use Sublime Text, that package should hopefully make it a little easier and quicker to incorporate UMD into your workflow. There is also <a href="https://github.com/quandora/grunt-umd-wrapper">a Grunt plugin</a> and <a href="https://github.com/phated/gulp-wrap-umd">a Gulp plugin</a> available to automate the process of wrapping your code in UMD.</p>

<p>An alternative to UMD is something I just recently learned about called <a href="http://urequire.org">uRequire</a>. The goal of uRequire is apparently to take the ugliness out of UMD boilerplate and the like (which, again, I don&rsquo;t think is too much of a problem) and make it easier to adapt your modules to most environments. I haven&rsquo;t used it myself, but it looks promising, so maybe I will write about that in the future.</p>

<p>So there you go. I hope this post has helped you understand how UMD works and encouraged you to start using it in your own projects.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I am also aware of a project called <a href="http://browserify.org">Browserify</a>, which lets you load modules in Node fashion in the browser. It&rsquo;s really picking up steam lately, but my experience is mainly with AMD and RequireJS, so that&rsquo;s what I&rsquo;m focusing on here. But since Browserify uses Node-style module loading, UMD can still be used for it.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
